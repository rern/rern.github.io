# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _upnpp
else:
    import _upnpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _upnpp.delete_SwigPyIterator

    def value(self):
        return _upnpp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _upnpp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _upnpp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _upnpp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _upnpp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _upnpp.SwigPyIterator_copy(self)

    def next(self):
        return _upnpp.SwigPyIterator_next(self)

    def __next__(self):
        return _upnpp.SwigPyIterator___next__(self)

    def previous(self):
        return _upnpp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _upnpp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _upnpp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _upnpp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _upnpp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _upnpp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _upnpp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _upnpp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _upnpp:
_upnpp.SwigPyIterator_swigregister(SwigPyIterator)

class VectorUPnPDirContent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorUPnPDirContent_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorUPnPDirContent___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorUPnPDirContent___bool__(self)

    def __len__(self):
        return _upnpp.VectorUPnPDirContent___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorUPnPDirContent___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorUPnPDirContent___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorUPnPDirContent___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorUPnPDirContent___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorUPnPDirContent___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorUPnPDirContent___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorUPnPDirContent_pop(self)

    def append(self, x):
        return _upnpp.VectorUPnPDirContent_append(self, x)

    def empty(self):
        return _upnpp.VectorUPnPDirContent_empty(self)

    def size(self):
        return _upnpp.VectorUPnPDirContent_size(self)

    def swap(self, v):
        return _upnpp.VectorUPnPDirContent_swap(self, v)

    def begin(self):
        return _upnpp.VectorUPnPDirContent_begin(self)

    def end(self):
        return _upnpp.VectorUPnPDirContent_end(self)

    def rbegin(self):
        return _upnpp.VectorUPnPDirContent_rbegin(self)

    def rend(self):
        return _upnpp.VectorUPnPDirContent_rend(self)

    def clear(self):
        return _upnpp.VectorUPnPDirContent_clear(self)

    def get_allocator(self):
        return _upnpp.VectorUPnPDirContent_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorUPnPDirContent_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorUPnPDirContent_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorUPnPDirContent_swiginit(self, _upnpp.new_VectorUPnPDirContent(*args))

    def push_back(self, x):
        return _upnpp.VectorUPnPDirContent_push_back(self, x)

    def front(self):
        return _upnpp.VectorUPnPDirContent_front(self)

    def back(self):
        return _upnpp.VectorUPnPDirContent_back(self)

    def assign(self, n, x):
        return _upnpp.VectorUPnPDirContent_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorUPnPDirContent_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorUPnPDirContent_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorUPnPDirContent_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorUPnPDirContent_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorUPnPDirContent

# Register VectorUPnPDirContent in _upnpp:
_upnpp.VectorUPnPDirContent_swigregister(VectorUPnPDirContent)

class VectorUPnPResource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorUPnPResource_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorUPnPResource___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorUPnPResource___bool__(self)

    def __len__(self):
        return _upnpp.VectorUPnPResource___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorUPnPResource___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorUPnPResource___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorUPnPResource___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorUPnPResource___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorUPnPResource___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorUPnPResource___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorUPnPResource_pop(self)

    def append(self, x):
        return _upnpp.VectorUPnPResource_append(self, x)

    def empty(self):
        return _upnpp.VectorUPnPResource_empty(self)

    def size(self):
        return _upnpp.VectorUPnPResource_size(self)

    def swap(self, v):
        return _upnpp.VectorUPnPResource_swap(self, v)

    def begin(self):
        return _upnpp.VectorUPnPResource_begin(self)

    def end(self):
        return _upnpp.VectorUPnPResource_end(self)

    def rbegin(self):
        return _upnpp.VectorUPnPResource_rbegin(self)

    def rend(self):
        return _upnpp.VectorUPnPResource_rend(self)

    def clear(self):
        return _upnpp.VectorUPnPResource_clear(self)

    def get_allocator(self):
        return _upnpp.VectorUPnPResource_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorUPnPResource_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorUPnPResource_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorUPnPResource_swiginit(self, _upnpp.new_VectorUPnPResource(*args))

    def push_back(self, x):
        return _upnpp.VectorUPnPResource_push_back(self, x)

    def front(self):
        return _upnpp.VectorUPnPResource_front(self)

    def back(self):
        return _upnpp.VectorUPnPResource_back(self)

    def assign(self, n, x):
        return _upnpp.VectorUPnPResource_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorUPnPResource_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorUPnPResource_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorUPnPResource_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorUPnPResource_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorUPnPResource

# Register VectorUPnPResource in _upnpp:
_upnpp.VectorUPnPResource_swigregister(VectorUPnPResource)

class UPnPResource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_uri = property(_upnpp.UPnPResource_m_uri_get, _upnpp.UPnPResource_m_uri_set)
    m_props = property(_upnpp.UPnPResource_m_props_get, _upnpp.UPnPResource_m_props_set)

    def protoInfo(self, e):
        return _upnpp.UPnPResource_protoInfo(self, e)

    def __init__(self):
        _upnpp.UPnPResource_swiginit(self, _upnpp.new_UPnPResource())
    __swig_destroy__ = _upnpp.delete_UPnPResource

# Register UPnPResource in _upnpp:
_upnpp.UPnPResource_swigregister(UPnPResource)

class UPnPDirObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    objtnone = _upnpp.UPnPDirObject_objtnone
    item = _upnpp.UPnPDirObject_item
    container = _upnpp.UPnPDirObject_container
    ITC_audioItem = _upnpp.UPnPDirObject_ITC_audioItem
    ITC_playlist = _upnpp.UPnPDirObject_ITC_playlist
    ITC_unknown = _upnpp.UPnPDirObject_ITC_unknown
    ITC_videoItem = _upnpp.UPnPDirObject_ITC_videoItem
    ITC_audioItem_musicTrack = _upnpp.UPnPDirObject_ITC_audioItem_musicTrack
    ITC_audioItem_playlist = _upnpp.UPnPDirObject_ITC_audioItem_playlist
    m_id = property(_upnpp.UPnPDirObject_m_id_get, _upnpp.UPnPDirObject_m_id_set)
    m_pid = property(_upnpp.UPnPDirObject_m_pid_get, _upnpp.UPnPDirObject_m_pid_set)
    m_title = property(_upnpp.UPnPDirObject_m_title_get, _upnpp.UPnPDirObject_m_title_set)
    m_type = property(_upnpp.UPnPDirObject_m_type_get, _upnpp.UPnPDirObject_m_type_set)
    m_iclass = property(_upnpp.UPnPDirObject_m_iclass_get, _upnpp.UPnPDirObject_m_iclass_set)
    m_props = property(_upnpp.UPnPDirObject_m_props_get, _upnpp.UPnPDirObject_m_props_set)
    m_allprops = property(_upnpp.UPnPDirObject_m_allprops_get, _upnpp.UPnPDirObject_m_allprops_set)
    m_resources = property(_upnpp.UPnPDirObject_m_resources_get, _upnpp.UPnPDirObject_m_resources_set)

    def getprop(self, *args):
        return _upnpp.UPnPDirObject_getprop(self, *args)

    def getrprop(self, ridx, nm, val):
        return _upnpp.UPnPDirObject_getrprop(self, ridx, nm, val)

    def f2s(self, nm, isresfield):
        return _upnpp.UPnPDirObject_f2s(self, nm, isresfield)

    def getDurationSeconds(self, ridx=0):
        return _upnpp.UPnPDirObject_getDurationSeconds(self, ridx)

    def getdidl(self):
        return _upnpp.UPnPDirObject_getdidl(self)

    def clear(self, detailed=False):
        return _upnpp.UPnPDirObject_clear(self, detailed)

    def dump(self):
        return _upnpp.UPnPDirObject_dump(self)

    def __init__(self):
        _upnpp.UPnPDirObject_swiginit(self, _upnpp.new_UPnPDirObject())
    __swig_destroy__ = _upnpp.delete_UPnPDirObject

# Register UPnPDirObject in _upnpp:
_upnpp.UPnPDirObject_swigregister(UPnPDirObject)

class UPnPDirContent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_containers = property(_upnpp.UPnPDirContent_m_containers_get, _upnpp.UPnPDirContent_m_containers_set)
    m_items = property(_upnpp.UPnPDirContent_m_items_get, _upnpp.UPnPDirContent_m_items_set)

    def clear(self):
        return _upnpp.UPnPDirContent_clear(self)

    def parse(self, didltext, detailed=False):
        return _upnpp.UPnPDirContent_parse(self, didltext, detailed)

    def __init__(self):
        _upnpp.UPnPDirContent_swiginit(self, _upnpp.new_UPnPDirContent())
    __swig_destroy__ = _upnpp.delete_UPnPDirContent

# Register UPnPDirContent in _upnpp:
_upnpp.UPnPDirContent_swigregister(UPnPDirContent)

class VarEventReporter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _upnpp.delete_VarEventReporter

    def changed(self, *args):
        return _upnpp.VarEventReporter_changed(self, *args)

    def autorenew_failed(self):
        return _upnpp.VarEventReporter_autorenew_failed(self)

# Register VarEventReporter in _upnpp:
_upnpp.VarEventReporter_swigregister(VarEventReporter)

class Service(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _upnpp.delete_Service

    def initFromDescription(self, description):
        return _upnpp.Service_initFromDescription(self, description)

    def reSubscribe(self):
        return _upnpp.Service_reSubscribe(self)

    def getFriendlyName(self):
        return _upnpp.Service_getFriendlyName(self)

    def getDeviceId(self):
        return _upnpp.Service_getDeviceId(self)

    def getServiceType(self):
        return _upnpp.Service_getServiceType(self)

    def getActionURL(self):
        return _upnpp.Service_getActionURL(self)

    def getModelName(self):
        return _upnpp.Service_getModelName(self)

    def getManufacturer(self):
        return _upnpp.Service_getManufacturer(self)

    def runAction(self, args, data):
        return _upnpp.Service_runAction(self, args, data)

    def runTrivialAction(self, actionName):
        return _upnpp.Service_runTrivialAction(self, actionName)

    def getReporter(self):
        return _upnpp.Service_getReporter(self)

    def installReporter(self, reporter):
        return _upnpp.Service_installReporter(self, reporter)

    def serviceTypeMatch(self, tp):
        return _upnpp.Service_serviceTypeMatch(self, tp)

# Register Service in _upnpp:
_upnpp.Service_swigregister(Service)

class TypedService(Service):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, tp):
        _upnpp.TypedService_swiginit(self, _upnpp.new_TypedService(tp))
    __swig_destroy__ = _upnpp.delete_TypedService

    def serviceTypeMatch(self, tp):
        return _upnpp.TypedService_serviceTypeMatch(self, tp)

    def runAction(self, name, args, retdata):
        return _upnpp.TypedService_runAction(self, name, args, retdata)

# Register TypedService in _upnpp:
_upnpp.TypedService_swigregister(TypedService)


def findTypedService(devname, servicetype, fuzzy):
    return _upnpp.findTypedService(devname, servicetype, fuzzy)
class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorString___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorString___bool__(self)

    def __len__(self):
        return _upnpp.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorString___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorString_pop(self)

    def append(self, x):
        return _upnpp.VectorString_append(self, x)

    def empty(self):
        return _upnpp.VectorString_empty(self)

    def size(self):
        return _upnpp.VectorString_size(self)

    def swap(self, v):
        return _upnpp.VectorString_swap(self, v)

    def begin(self):
        return _upnpp.VectorString_begin(self)

    def end(self):
        return _upnpp.VectorString_end(self)

    def rbegin(self):
        return _upnpp.VectorString_rbegin(self)

    def rend(self):
        return _upnpp.VectorString_rend(self)

    def clear(self):
        return _upnpp.VectorString_clear(self)

    def get_allocator(self):
        return _upnpp.VectorString_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorString_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorString_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorString_swiginit(self, _upnpp.new_VectorString(*args))

    def push_back(self, x):
        return _upnpp.VectorString_push_back(self, x)

    def front(self):
        return _upnpp.VectorString_front(self)

    def back(self):
        return _upnpp.VectorString_back(self)

    def assign(self, n, x):
        return _upnpp.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorString_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorString_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorString_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorString_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorString

# Register VectorString in _upnpp:
_upnpp.VectorString_swigregister(VectorString)

class MapStringString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.MapStringString___nonzero__(self)

    def __bool__(self):
        return _upnpp.MapStringString___bool__(self)

    def __len__(self):
        return _upnpp.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _upnpp.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _upnpp.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _upnpp.MapStringString_has_key(self, key)

    def keys(self):
        return _upnpp.MapStringString_keys(self)

    def values(self):
        return _upnpp.MapStringString_values(self)

    def items(self):
        return _upnpp.MapStringString_items(self)

    def __contains__(self, key):
        return _upnpp.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _upnpp.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _upnpp.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _upnpp.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _upnpp.MapStringString_asdict(self)

    def __init__(self, *args):
        _upnpp.MapStringString_swiginit(self, _upnpp.new_MapStringString(*args))

    def empty(self):
        return _upnpp.MapStringString_empty(self)

    def size(self):
        return _upnpp.MapStringString_size(self)

    def swap(self, v):
        return _upnpp.MapStringString_swap(self, v)

    def begin(self):
        return _upnpp.MapStringString_begin(self)

    def end(self):
        return _upnpp.MapStringString_end(self)

    def rbegin(self):
        return _upnpp.MapStringString_rbegin(self)

    def rend(self):
        return _upnpp.MapStringString_rend(self)

    def clear(self):
        return _upnpp.MapStringString_clear(self)

    def get_allocator(self):
        return _upnpp.MapStringString_get_allocator(self)

    def count(self, x):
        return _upnpp.MapStringString_count(self, x)

    def erase(self, *args):
        return _upnpp.MapStringString_erase(self, *args)

    def find(self, x):
        return _upnpp.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _upnpp.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _upnpp.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _upnpp.delete_MapStringString

# Register MapStringString in _upnpp:
_upnpp.MapStringString_swigregister(MapStringString)

LOGGER_THREADSAFE = _upnpp.LOGGER_THREADSAFE
LOGGER_STATICVERBOSITY = _upnpp.LOGGER_STATICVERBOSITY
LOGGER_DATESIZE = _upnpp.LOGGER_DATESIZE
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getTheLog(*args):
        return _upnpp.Logger_getTheLog(*args)

    def reopen(self, fn):
        return _upnpp.Logger_reopen(self, fn)

    def getstream(self):
        return _upnpp.Logger_getstream(self)
    LLNON = _upnpp.Logger_LLNON
    LLFAT = _upnpp.Logger_LLFAT
    LLERR = _upnpp.Logger_LLERR
    LLINF = _upnpp.Logger_LLINF
    LLDEB = _upnpp.Logger_LLDEB
    LLDEB0 = _upnpp.Logger_LLDEB0
    LLDEB1 = _upnpp.Logger_LLDEB1
    LLDEB2 = _upnpp.Logger_LLDEB2

    def setLogLevel(self, level):
        return _upnpp.Logger_setLogLevel(self, level)

    def setloglevel(self, level):
        return _upnpp.Logger_setloglevel(self, level)

    def getloglevel(self):
        return _upnpp.Logger_getloglevel(self)

    def getlogfilename(self):
        return _upnpp.Logger_getlogfilename(self)

    def logisstderr(self):
        return _upnpp.Logger_logisstderr(self)

    def logthedate(self, onoff):
        return _upnpp.Logger_logthedate(self, onoff)

    def loggingdate(self):
        return _upnpp.Logger_loggingdate(self)

    def setdateformat(self, fmt):
        return _upnpp.Logger_setdateformat(self, fmt)

    def datestring(self):
        return _upnpp.Logger_datestring(self)

    def getmutex(self):
        return _upnpp.Logger_getmutex(self)
    __swig_destroy__ = _upnpp.delete_Logger

# Register Logger in _upnpp:
_upnpp.Logger_swigregister(Logger)

def Logger_getTheLog(*args):
    return _upnpp.Logger_getTheLog(*args)

LOGGER_LOCAL_LOGINC = _upnpp.LOGGER_LOCAL_LOGINC

def _log_check_strerror_r(*args):
    return _upnpp._log_check_strerror_r(*args)
class UPnPServiceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    serviceType = property(_upnpp.UPnPServiceDesc_serviceType_get, _upnpp.UPnPServiceDesc_serviceType_set)
    serviceId = property(_upnpp.UPnPServiceDesc_serviceId_get, _upnpp.UPnPServiceDesc_serviceId_set)
    SCPDURL = property(_upnpp.UPnPServiceDesc_SCPDURL_get, _upnpp.UPnPServiceDesc_SCPDURL_set)
    controlURL = property(_upnpp.UPnPServiceDesc_controlURL_get, _upnpp.UPnPServiceDesc_controlURL_set)
    eventSubURL = property(_upnpp.UPnPServiceDesc_eventSubURL_get, _upnpp.UPnPServiceDesc_eventSubURL_set)

    def clear(self):
        return _upnpp.UPnPServiceDesc_clear(self)

    def dump(self):
        return _upnpp.UPnPServiceDesc_dump(self)

    def fetchAndParseDesc(self, urlbase, parsed, XMLText=None):
        return _upnpp.UPnPServiceDesc_fetchAndParseDesc(self, urlbase, parsed, XMLText)

    def __init__(self):
        _upnpp.UPnPServiceDesc_swiginit(self, _upnpp.new_UPnPServiceDesc())
    __swig_destroy__ = _upnpp.delete_UPnPServiceDesc

# Register UPnPServiceDesc in _upnpp:
_upnpp.UPnPServiceDesc_swigregister(UPnPServiceDesc)

class UPnPDeviceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.UPnPDeviceDesc_swiginit(self, _upnpp.new_UPnPDeviceDesc(*args))
    ok = property(_upnpp.UPnPDeviceDesc_ok_get, _upnpp.UPnPDeviceDesc_ok_set)
    deviceType = property(_upnpp.UPnPDeviceDesc_deviceType_get, _upnpp.UPnPDeviceDesc_deviceType_set)
    friendlyName = property(_upnpp.UPnPDeviceDesc_friendlyName_get, _upnpp.UPnPDeviceDesc_friendlyName_set)
    UDN = property(_upnpp.UPnPDeviceDesc_UDN_get, _upnpp.UPnPDeviceDesc_UDN_set)
    URLBase = property(_upnpp.UPnPDeviceDesc_URLBase_get, _upnpp.UPnPDeviceDesc_URLBase_set)
    manufacturer = property(_upnpp.UPnPDeviceDesc_manufacturer_get, _upnpp.UPnPDeviceDesc_manufacturer_set)
    modelName = property(_upnpp.UPnPDeviceDesc_modelName_get, _upnpp.UPnPDeviceDesc_modelName_set)
    XMLText = property(_upnpp.UPnPDeviceDesc_XMLText_get, _upnpp.UPnPDeviceDesc_XMLText_set)
    services = property(_upnpp.UPnPDeviceDesc_services_get, _upnpp.UPnPDeviceDesc_services_set)
    embedded = property(_upnpp.UPnPDeviceDesc_embedded_get, _upnpp.UPnPDeviceDesc_embedded_set)

    def clear(self):
        return _upnpp.UPnPDeviceDesc_clear(self)

    def dump(self):
        return _upnpp.UPnPDeviceDesc_dump(self)
    __swig_destroy__ = _upnpp.delete_UPnPDeviceDesc

# Register UPnPDeviceDesc in _upnpp:
_upnpp.UPnPDeviceDesc_swigregister(UPnPDeviceDesc)

class UPnPDeviceDirectory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getTheDir(search_window=2):
        return _upnpp.UPnPDeviceDirectory_getTheDir(search_window)

    @staticmethod
    def terminate():
        return _upnpp.UPnPDeviceDirectory_terminate()

    def traverse(self, arg2):
        return _upnpp.UPnPDeviceDirectory_traverse(self, arg2)

    def getRemainingDelayMs(self):
        return _upnpp.UPnPDeviceDirectory_getRemainingDelayMs(self)

    def getRemainingDelay(self):
        return _upnpp.UPnPDeviceDirectory_getRemainingDelay(self)

    @staticmethod
    def addCallback(v):
        return _upnpp.UPnPDeviceDirectory_addCallback(v)

    @staticmethod
    def delCallback(idx):
        return _upnpp.UPnPDeviceDirectory_delCallback(idx)

    def getDevByFName(self, fname, ddesc):
        return _upnpp.UPnPDeviceDirectory_getDevByFName(self, fname, ddesc)

    def getDevByUDN(self, udn, ddesc):
        return _upnpp.UPnPDeviceDirectory_getDevByUDN(self, udn, ddesc)

    def getDescriptionDocuments(self, uidOrFriendly, deviceXML, srvsXML):
        return _upnpp.UPnPDeviceDirectory_getDescriptionDocuments(self, uidOrFriendly, deviceXML, srvsXML)

    def ok(self):
        return _upnpp.UPnPDeviceDirectory_ok(self)

    def getReason(self):
        return _upnpp.UPnPDeviceDirectory_getReason(self)
    __swig_destroy__ = _upnpp.delete_UPnPDeviceDirectory

# Register UPnPDeviceDirectory in _upnpp:
_upnpp.UPnPDeviceDirectory_swigregister(UPnPDeviceDirectory)

def UPnPDeviceDirectory_getTheDir(search_window=2):
    return _upnpp.UPnPDeviceDirectory_getTheDir(search_window)

def UPnPDeviceDirectory_terminate():
    return _upnpp.UPnPDeviceDirectory_terminate()

def UPnPDeviceDirectory_addCallback(v):
    return _upnpp.UPnPDeviceDirectory_addCallback(v)

def UPnPDeviceDirectory_delCallback(idx):
    return _upnpp.UPnPDeviceDirectory_delCallback(idx)

class CUPnPServiceArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.CUPnPServiceArgument_swiginit(self, _upnpp.new_CUPnPServiceArgument(*args))
    name = property(_upnpp.CUPnPServiceArgument_name_get, _upnpp.CUPnPServiceArgument_name_set)
    todevice = property(_upnpp.CUPnPServiceArgument_todevice_get, _upnpp.CUPnPServiceArgument_todevice_set)
    relatedVariable = property(_upnpp.CUPnPServiceArgument_relatedVariable_get, _upnpp.CUPnPServiceArgument_relatedVariable_set)
    __swig_destroy__ = _upnpp.delete_CUPnPServiceArgument

# Register CUPnPServiceArgument in _upnpp:
_upnpp.CUPnPServiceArgument_swigregister(CUPnPServiceArgument)

class VectorCUPnPServiceArgument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorCUPnPServiceArgument_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorCUPnPServiceArgument___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorCUPnPServiceArgument___bool__(self)

    def __len__(self):
        return _upnpp.VectorCUPnPServiceArgument___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceArgument___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorCUPnPServiceArgument___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceArgument___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorCUPnPServiceArgument___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorCUPnPServiceArgument___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorCUPnPServiceArgument___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorCUPnPServiceArgument_pop(self)

    def append(self, x):
        return _upnpp.VectorCUPnPServiceArgument_append(self, x)

    def empty(self):
        return _upnpp.VectorCUPnPServiceArgument_empty(self)

    def size(self):
        return _upnpp.VectorCUPnPServiceArgument_size(self)

    def swap(self, v):
        return _upnpp.VectorCUPnPServiceArgument_swap(self, v)

    def begin(self):
        return _upnpp.VectorCUPnPServiceArgument_begin(self)

    def end(self):
        return _upnpp.VectorCUPnPServiceArgument_end(self)

    def rbegin(self):
        return _upnpp.VectorCUPnPServiceArgument_rbegin(self)

    def rend(self):
        return _upnpp.VectorCUPnPServiceArgument_rend(self)

    def clear(self):
        return _upnpp.VectorCUPnPServiceArgument_clear(self)

    def get_allocator(self):
        return _upnpp.VectorCUPnPServiceArgument_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorCUPnPServiceArgument_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorCUPnPServiceArgument_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorCUPnPServiceArgument_swiginit(self, _upnpp.new_VectorCUPnPServiceArgument(*args))

    def push_back(self, x):
        return _upnpp.VectorCUPnPServiceArgument_push_back(self, x)

    def front(self):
        return _upnpp.VectorCUPnPServiceArgument_front(self)

    def back(self):
        return _upnpp.VectorCUPnPServiceArgument_back(self)

    def assign(self, n, x):
        return _upnpp.VectorCUPnPServiceArgument_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorCUPnPServiceArgument_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorCUPnPServiceArgument_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorCUPnPServiceArgument_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorCUPnPServiceArgument_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorCUPnPServiceArgument

# Register VectorCUPnPServiceArgument in _upnpp:
_upnpp.VectorCUPnPServiceArgument_swigregister(VectorCUPnPServiceArgument)

class CUPnPServiceAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.CUPnPServiceAction_swiginit(self, _upnpp.new_CUPnPServiceAction(*args))
    name = property(_upnpp.CUPnPServiceAction_name_get, _upnpp.CUPnPServiceAction_name_set)
    argList = property(_upnpp.CUPnPServiceAction_argList_get, _upnpp.CUPnPServiceAction_argList_set)
    __swig_destroy__ = _upnpp.delete_CUPnPServiceAction

# Register CUPnPServiceAction in _upnpp:
_upnpp.CUPnPServiceAction_swigregister(CUPnPServiceAction)

class CUPnPServiceVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.CUPnPServiceVariable_swiginit(self, _upnpp.new_CUPnPServiceVariable(*args))
    name = property(_upnpp.CUPnPServiceVariable_name_get, _upnpp.CUPnPServiceVariable_name_set)
    sendEvents = property(_upnpp.CUPnPServiceVariable_sendEvents_get, _upnpp.CUPnPServiceVariable_sendEvents_set)
    dataType = property(_upnpp.CUPnPServiceVariable_dataType_get, _upnpp.CUPnPServiceVariable_dataType_set)
    hasValueRange = property(_upnpp.CUPnPServiceVariable_hasValueRange_get, _upnpp.CUPnPServiceVariable_hasValueRange_set)
    minimum = property(_upnpp.CUPnPServiceVariable_minimum_get, _upnpp.CUPnPServiceVariable_minimum_set)
    maximum = property(_upnpp.CUPnPServiceVariable_maximum_get, _upnpp.CUPnPServiceVariable_maximum_set)
    step = property(_upnpp.CUPnPServiceVariable_step_get, _upnpp.CUPnPServiceVariable_step_set)
    __swig_destroy__ = _upnpp.delete_CUPnPServiceVariable

# Register CUPnPServiceVariable in _upnpp:
_upnpp.CUPnPServiceVariable_swigregister(CUPnPServiceVariable)

class VectorCUPnPServiceAction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorCUPnPServiceAction_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorCUPnPServiceAction___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorCUPnPServiceAction___bool__(self)

    def __len__(self):
        return _upnpp.VectorCUPnPServiceAction___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceAction___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorCUPnPServiceAction___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceAction___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorCUPnPServiceAction___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorCUPnPServiceAction___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorCUPnPServiceAction___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorCUPnPServiceAction_pop(self)

    def append(self, x):
        return _upnpp.VectorCUPnPServiceAction_append(self, x)

    def empty(self):
        return _upnpp.VectorCUPnPServiceAction_empty(self)

    def size(self):
        return _upnpp.VectorCUPnPServiceAction_size(self)

    def swap(self, v):
        return _upnpp.VectorCUPnPServiceAction_swap(self, v)

    def begin(self):
        return _upnpp.VectorCUPnPServiceAction_begin(self)

    def end(self):
        return _upnpp.VectorCUPnPServiceAction_end(self)

    def rbegin(self):
        return _upnpp.VectorCUPnPServiceAction_rbegin(self)

    def rend(self):
        return _upnpp.VectorCUPnPServiceAction_rend(self)

    def clear(self):
        return _upnpp.VectorCUPnPServiceAction_clear(self)

    def get_allocator(self):
        return _upnpp.VectorCUPnPServiceAction_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorCUPnPServiceAction_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorCUPnPServiceAction_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorCUPnPServiceAction_swiginit(self, _upnpp.new_VectorCUPnPServiceAction(*args))

    def push_back(self, x):
        return _upnpp.VectorCUPnPServiceAction_push_back(self, x)

    def front(self):
        return _upnpp.VectorCUPnPServiceAction_front(self)

    def back(self):
        return _upnpp.VectorCUPnPServiceAction_back(self)

    def assign(self, n, x):
        return _upnpp.VectorCUPnPServiceAction_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorCUPnPServiceAction_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorCUPnPServiceAction_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorCUPnPServiceAction_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorCUPnPServiceAction_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorCUPnPServiceAction

# Register VectorCUPnPServiceAction in _upnpp:
_upnpp.VectorCUPnPServiceAction_swigregister(VectorCUPnPServiceAction)

class VectorCUPnPServiceVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorCUPnPServiceVariable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorCUPnPServiceVariable___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorCUPnPServiceVariable___bool__(self)

    def __len__(self):
        return _upnpp.VectorCUPnPServiceVariable___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceVariable___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorCUPnPServiceVariable___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceVariable___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorCUPnPServiceVariable___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorCUPnPServiceVariable___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorCUPnPServiceVariable___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorCUPnPServiceVariable_pop(self)

    def append(self, x):
        return _upnpp.VectorCUPnPServiceVariable_append(self, x)

    def empty(self):
        return _upnpp.VectorCUPnPServiceVariable_empty(self)

    def size(self):
        return _upnpp.VectorCUPnPServiceVariable_size(self)

    def swap(self, v):
        return _upnpp.VectorCUPnPServiceVariable_swap(self, v)

    def begin(self):
        return _upnpp.VectorCUPnPServiceVariable_begin(self)

    def end(self):
        return _upnpp.VectorCUPnPServiceVariable_end(self)

    def rbegin(self):
        return _upnpp.VectorCUPnPServiceVariable_rbegin(self)

    def rend(self):
        return _upnpp.VectorCUPnPServiceVariable_rend(self)

    def clear(self):
        return _upnpp.VectorCUPnPServiceVariable_clear(self)

    def get_allocator(self):
        return _upnpp.VectorCUPnPServiceVariable_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorCUPnPServiceVariable_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorCUPnPServiceVariable_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorCUPnPServiceVariable_swiginit(self, _upnpp.new_VectorCUPnPServiceVariable(*args))

    def push_back(self, x):
        return _upnpp.VectorCUPnPServiceVariable_push_back(self, x)

    def front(self):
        return _upnpp.VectorCUPnPServiceVariable_front(self)

    def back(self):
        return _upnpp.VectorCUPnPServiceVariable_back(self)

    def assign(self, n, x):
        return _upnpp.VectorCUPnPServiceVariable_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorCUPnPServiceVariable_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorCUPnPServiceVariable_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorCUPnPServiceVariable_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorCUPnPServiceVariable_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorCUPnPServiceVariable

# Register VectorCUPnPServiceVariable in _upnpp:
_upnpp.VectorCUPnPServiceVariable_swigregister(VectorCUPnPServiceVariable)

class CUPnPServiceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.CUPnPServiceDesc_swiginit(self, _upnpp.new_CUPnPServiceDesc(*args))
    serviceType = property(_upnpp.CUPnPServiceDesc_serviceType_get, _upnpp.CUPnPServiceDesc_serviceType_set)
    serviceId = property(_upnpp.CUPnPServiceDesc_serviceId_get, _upnpp.CUPnPServiceDesc_serviceId_set)
    SCPDURL = property(_upnpp.CUPnPServiceDesc_SCPDURL_get, _upnpp.CUPnPServiceDesc_SCPDURL_set)
    controlURL = property(_upnpp.CUPnPServiceDesc_controlURL_get, _upnpp.CUPnPServiceDesc_controlURL_set)
    eventSubURL = property(_upnpp.CUPnPServiceDesc_eventSubURL_get, _upnpp.CUPnPServiceDesc_eventSubURL_set)

    def fetchAndParseDesc(self, urlbase):
        return _upnpp.CUPnPServiceDesc_fetchAndParseDesc(self, urlbase)
    actionList = property(_upnpp.CUPnPServiceDesc_actionList_get, _upnpp.CUPnPServiceDesc_actionList_set)
    stateTable = property(_upnpp.CUPnPServiceDesc_stateTable_get, _upnpp.CUPnPServiceDesc_stateTable_set)
    __swig_destroy__ = _upnpp.delete_CUPnPServiceDesc

# Register CUPnPServiceDesc in _upnpp:
_upnpp.CUPnPServiceDesc_swigregister(CUPnPServiceDesc)

class VectorCUPnPServiceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorCUPnPServiceDesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorCUPnPServiceDesc___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorCUPnPServiceDesc___bool__(self)

    def __len__(self):
        return _upnpp.VectorCUPnPServiceDesc___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceDesc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorCUPnPServiceDesc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorCUPnPServiceDesc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorCUPnPServiceDesc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorCUPnPServiceDesc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorCUPnPServiceDesc___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorCUPnPServiceDesc_pop(self)

    def append(self, x):
        return _upnpp.VectorCUPnPServiceDesc_append(self, x)

    def empty(self):
        return _upnpp.VectorCUPnPServiceDesc_empty(self)

    def size(self):
        return _upnpp.VectorCUPnPServiceDesc_size(self)

    def swap(self, v):
        return _upnpp.VectorCUPnPServiceDesc_swap(self, v)

    def begin(self):
        return _upnpp.VectorCUPnPServiceDesc_begin(self)

    def end(self):
        return _upnpp.VectorCUPnPServiceDesc_end(self)

    def rbegin(self):
        return _upnpp.VectorCUPnPServiceDesc_rbegin(self)

    def rend(self):
        return _upnpp.VectorCUPnPServiceDesc_rend(self)

    def clear(self):
        return _upnpp.VectorCUPnPServiceDesc_clear(self)

    def get_allocator(self):
        return _upnpp.VectorCUPnPServiceDesc_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorCUPnPServiceDesc_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorCUPnPServiceDesc_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorCUPnPServiceDesc_swiginit(self, _upnpp.new_VectorCUPnPServiceDesc(*args))

    def push_back(self, x):
        return _upnpp.VectorCUPnPServiceDesc_push_back(self, x)

    def front(self):
        return _upnpp.VectorCUPnPServiceDesc_front(self)

    def back(self):
        return _upnpp.VectorCUPnPServiceDesc_back(self)

    def assign(self, n, x):
        return _upnpp.VectorCUPnPServiceDesc_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorCUPnPServiceDesc_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorCUPnPServiceDesc_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorCUPnPServiceDesc_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorCUPnPServiceDesc_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorCUPnPServiceDesc

# Register VectorCUPnPServiceDesc in _upnpp:
_upnpp.VectorCUPnPServiceDesc_swigregister(VectorCUPnPServiceDesc)

class CUPnPDeviceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.CUPnPDeviceDesc_swiginit(self, _upnpp.new_CUPnPDeviceDesc(*args))
    deviceType = property(_upnpp.CUPnPDeviceDesc_deviceType_get, _upnpp.CUPnPDeviceDesc_deviceType_set)
    friendlyName = property(_upnpp.CUPnPDeviceDesc_friendlyName_get, _upnpp.CUPnPDeviceDesc_friendlyName_set)
    UDN = property(_upnpp.CUPnPDeviceDesc_UDN_get, _upnpp.CUPnPDeviceDesc_UDN_set)
    URLBase = property(_upnpp.CUPnPDeviceDesc_URLBase_get, _upnpp.CUPnPDeviceDesc_URLBase_set)
    manufacturer = property(_upnpp.CUPnPDeviceDesc_manufacturer_get, _upnpp.CUPnPDeviceDesc_manufacturer_set)
    modelName = property(_upnpp.CUPnPDeviceDesc_modelName_get, _upnpp.CUPnPDeviceDesc_modelName_set)
    XMLText = property(_upnpp.CUPnPDeviceDesc_XMLText_get, _upnpp.CUPnPDeviceDesc_XMLText_set)
    services = property(_upnpp.CUPnPDeviceDesc_services_get, _upnpp.CUPnPDeviceDesc_services_set)
    __swig_destroy__ = _upnpp.delete_CUPnPDeviceDesc

# Register CUPnPDeviceDesc in _upnpp:
_upnpp.CUPnPDeviceDesc_swigregister(CUPnPDeviceDesc)

class VectorCUPnPDeviceDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _upnpp.VectorCUPnPDeviceDesc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _upnpp.VectorCUPnPDeviceDesc___nonzero__(self)

    def __bool__(self):
        return _upnpp.VectorCUPnPDeviceDesc___bool__(self)

    def __len__(self):
        return _upnpp.VectorCUPnPDeviceDesc___len__(self)

    def __getslice__(self, i, j):
        return _upnpp.VectorCUPnPDeviceDesc___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _upnpp.VectorCUPnPDeviceDesc___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc___delitem__(self, *args)

    def __getitem__(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc___getitem__(self, *args)

    def __setitem__(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc___setitem__(self, *args)

    def pop(self):
        return _upnpp.VectorCUPnPDeviceDesc_pop(self)

    def append(self, x):
        return _upnpp.VectorCUPnPDeviceDesc_append(self, x)

    def empty(self):
        return _upnpp.VectorCUPnPDeviceDesc_empty(self)

    def size(self):
        return _upnpp.VectorCUPnPDeviceDesc_size(self)

    def swap(self, v):
        return _upnpp.VectorCUPnPDeviceDesc_swap(self, v)

    def begin(self):
        return _upnpp.VectorCUPnPDeviceDesc_begin(self)

    def end(self):
        return _upnpp.VectorCUPnPDeviceDesc_end(self)

    def rbegin(self):
        return _upnpp.VectorCUPnPDeviceDesc_rbegin(self)

    def rend(self):
        return _upnpp.VectorCUPnPDeviceDesc_rend(self)

    def clear(self):
        return _upnpp.VectorCUPnPDeviceDesc_clear(self)

    def get_allocator(self):
        return _upnpp.VectorCUPnPDeviceDesc_get_allocator(self)

    def pop_back(self):
        return _upnpp.VectorCUPnPDeviceDesc_pop_back(self)

    def erase(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc_erase(self, *args)

    def __init__(self, *args):
        _upnpp.VectorCUPnPDeviceDesc_swiginit(self, _upnpp.new_VectorCUPnPDeviceDesc(*args))

    def push_back(self, x):
        return _upnpp.VectorCUPnPDeviceDesc_push_back(self, x)

    def front(self):
        return _upnpp.VectorCUPnPDeviceDesc_front(self)

    def back(self):
        return _upnpp.VectorCUPnPDeviceDesc_back(self)

    def assign(self, n, x):
        return _upnpp.VectorCUPnPDeviceDesc_assign(self, n, x)

    def resize(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc_resize(self, *args)

    def insert(self, *args):
        return _upnpp.VectorCUPnPDeviceDesc_insert(self, *args)

    def reserve(self, n):
        return _upnpp.VectorCUPnPDeviceDesc_reserve(self, n)

    def capacity(self):
        return _upnpp.VectorCUPnPDeviceDesc_capacity(self)
    __swig_destroy__ = _upnpp.delete_VectorCUPnPDeviceDesc

# Register VectorCUPnPDeviceDesc in _upnpp:
_upnpp.VectorCUPnPDeviceDesc_swigregister(VectorCUPnPDeviceDesc)


def getDevices():
    return _upnpp.getDevices()
class RenderingControl(Service):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.RenderingControl_swiginit(self, _upnpp.new_RenderingControl(*args))
    __swig_destroy__ = _upnpp.delete_RenderingControl

    @staticmethod
    def isRDCService(st):
        return _upnpp.RenderingControl_isRDCService(st)

    def serviceTypeMatch(self, tp):
        return _upnpp.RenderingControl_serviceTypeMatch(self, tp)

    def setVolume(self, *args):
        return _upnpp.RenderingControl_setVolume(self, *args)

    def getVolume(self, *args):
        return _upnpp.RenderingControl_getVolume(self, *args)

    def setMute(self, *args):
        return _upnpp.RenderingControl_setMute(self, *args)

    def getMute(self, *args):
        return _upnpp.RenderingControl_getMute(self, *args)

# Register RenderingControl in _upnpp:
_upnpp.RenderingControl_swigregister(RenderingControl)

def RenderingControl_isRDCService(st):
    return _upnpp.RenderingControl_isRDCService(st)

class AVTransport(Service):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.AVTransport_swiginit(self, _upnpp.new_AVTransport(*args))
    __swig_destroy__ = _upnpp.delete_AVTransport

    def setAVTransportURI(self, uri, metadata, instanceID=0):
        return _upnpp.AVTransport_setAVTransportURI(self, uri, metadata, instanceID)

    def setNextAVTransportURI(self, uri, md, instanceID=0):
        return _upnpp.AVTransport_setNextAVTransportURI(self, uri, md, instanceID)
    PM_Unknown = _upnpp.AVTransport_PM_Unknown
    PM_Normal = _upnpp.AVTransport_PM_Normal
    PM_Shuffle = _upnpp.AVTransport_PM_Shuffle
    PM_RepeatOne = _upnpp.AVTransport_PM_RepeatOne
    PM_RepeatAll = _upnpp.AVTransport_PM_RepeatAll
    PM_Random = _upnpp.AVTransport_PM_Random
    PM_Direct1 = _upnpp.AVTransport_PM_Direct1

    def setPlayMode(self, pm, instanceID=0):
        return _upnpp.AVTransport_setPlayMode(self, pm, instanceID)

    def getMediaInfo(self, info, instanceID=0):
        return _upnpp.AVTransport_getMediaInfo(self, info, instanceID)
    Unknown = _upnpp.AVTransport_Unknown
    Stopped = _upnpp.AVTransport_Stopped
    Playing = _upnpp.AVTransport_Playing
    Transitioning = _upnpp.AVTransport_Transitioning
    PausedPlayback = _upnpp.AVTransport_PausedPlayback
    PausedRecording = _upnpp.AVTransport_PausedRecording
    Recording = _upnpp.AVTransport_Recording
    NoMediaPresent = _upnpp.AVTransport_NoMediaPresent
    TPS_Unknown = _upnpp.AVTransport_TPS_Unknown
    TPS_Ok = _upnpp.AVTransport_TPS_Ok
    TPS_Error = _upnpp.AVTransport_TPS_Error

    def getTransportInfo(self, info, instanceID=0):
        return _upnpp.AVTransport_getTransportInfo(self, info, instanceID)

    def getPositionInfo(self, info, instanceID=0):
        return _upnpp.AVTransport_getPositionInfo(self, info, instanceID)

    def getDeviceCapabilities(self, info, instanceID=0):
        return _upnpp.AVTransport_getDeviceCapabilities(self, info, instanceID)

    def getTransportSettings(self, info, instanceID=0):
        return _upnpp.AVTransport_getTransportSettings(self, info, instanceID)

    def stop(self, instanceID=0):
        return _upnpp.AVTransport_stop(self, instanceID)

    def pause(self, instanceID=0):
        return _upnpp.AVTransport_pause(self, instanceID)

    def play(self, speed=1, instanceID=0):
        return _upnpp.AVTransport_play(self, speed, instanceID)
    SEEK_TRACK_NR = _upnpp.AVTransport_SEEK_TRACK_NR
    SEEK_ABS_TIME = _upnpp.AVTransport_SEEK_ABS_TIME
    SEEK_REL_TIME = _upnpp.AVTransport_SEEK_REL_TIME
    SEEK_ABS_COUNT = _upnpp.AVTransport_SEEK_ABS_COUNT
    SEEK_REL_COUNT = _upnpp.AVTransport_SEEK_REL_COUNT
    SEEK_CHANNEL_FREQ = _upnpp.AVTransport_SEEK_CHANNEL_FREQ
    SEEK_TAPE_INDEX = _upnpp.AVTransport_SEEK_TAPE_INDEX
    SEEK_FRAME = _upnpp.AVTransport_SEEK_FRAME

    def seek(self, mode, target, instanceID=0):
        return _upnpp.AVTransport_seek(self, mode, target, instanceID)

    def next(self, instanceID=0):
        return _upnpp.AVTransport_next(self, instanceID)

    def previous(self, instanceID=0):
        return _upnpp.AVTransport_previous(self, instanceID)
    TPA_Next = _upnpp.AVTransport_TPA_Next
    TPA_Pause = _upnpp.AVTransport_TPA_Pause
    TPA_Play = _upnpp.AVTransport_TPA_Play
    TPA_Previous = _upnpp.AVTransport_TPA_Previous
    TPA_Seek = _upnpp.AVTransport_TPA_Seek
    TPA_Stop = _upnpp.AVTransport_TPA_Stop

    def getCurrentTransportActions(self, actions, instanceID=0):
        return _upnpp.AVTransport_getCurrentTransportActions(self, actions, instanceID)

    @staticmethod
    def isAVTService(st):
        return _upnpp.AVTransport_isAVTService(st)

    def serviceTypeMatch(self, tp):
        return _upnpp.AVTransport_serviceTypeMatch(self, tp)

# Register AVTransport in _upnpp:
_upnpp.AVTransport_swigregister(AVTransport)

def AVTransport_isAVTService(st):
    return _upnpp.AVTransport_isAVTService(st)

class AVTPositionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    track = property(_upnpp.AVTPositionInfo_track_get, _upnpp.AVTPositionInfo_track_set)
    trackduration = property(_upnpp.AVTPositionInfo_trackduration_get, _upnpp.AVTPositionInfo_trackduration_set)
    trackuri = property(_upnpp.AVTPositionInfo_trackuri_get, _upnpp.AVTPositionInfo_trackuri_set)
    reltime = property(_upnpp.AVTPositionInfo_reltime_get, _upnpp.AVTPositionInfo_reltime_set)
    abstime = property(_upnpp.AVTPositionInfo_abstime_get, _upnpp.AVTPositionInfo_abstime_set)
    relcount = property(_upnpp.AVTPositionInfo_relcount_get, _upnpp.AVTPositionInfo_relcount_set)
    abscount = property(_upnpp.AVTPositionInfo_abscount_get, _upnpp.AVTPositionInfo_abscount_set)

    def __init__(self):
        _upnpp.AVTPositionInfo_swiginit(self, _upnpp.new_AVTPositionInfo())
    __swig_destroy__ = _upnpp.delete_AVTPositionInfo

# Register AVTPositionInfo in _upnpp:
_upnpp.AVTPositionInfo_swigregister(AVTPositionInfo)


def AVTGetPositionInfo(tp, inf):
    return _upnpp.AVTGetPositionInfo(tp, inf)
class PythonReporter(VarEventReporter):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _upnpp.PythonReporter_swiginit(self, _upnpp.new_PythonReporter(*args))
    __swig_destroy__ = _upnpp.delete_PythonReporter

    def changed(self, *args):
        return _upnpp.PythonReporter_changed(self, *args)

    def reportEvent(self, nm, val):
        return _upnpp.PythonReporter_reportEvent(self, nm, val)

# Register PythonReporter in _upnpp:
_upnpp.PythonReporter_swigregister(PythonReporter)


def installReporter(srv, o):
    return _upnpp.installReporter(srv, o)

def _makeVS(l):
    ret = VectorString()
    for v in l:
        ret.append(v)
    return ret
def runaction(dev, action, args):
    '''Wrap runAction() method, using natural python types (list and dict).'''
    args = _makeVS(args)
    retdata = MapStringString()
    ret = dev.runAction(action, args, retdata)
    if ret:
        return None
    retdict = {}
    for nm, val in retdata.iteritems():
        retdict[nm] = val
    return retdict



